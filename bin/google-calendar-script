#!/usr/bin/env bash
## BP010: Release metadata
## @build_type: bin
## @build_date: 2024-06-07T13:03:46Z
set -e
extern() {
  extern=$1
}
legacy() {
  legacy=$1
}
module() {
  module=$1
}
public() {
  public=$1
}
use() {
  use=$1
}
embed() {
  embed=$1
}
## BP004: Compile the entrypoint

module auth
module events
module test
module util

usage() {
  echo "Usage: google-calendar-script --sync"
  echo "       google-calendar-script --auth"
}

main() {
  local command
  local access_token_file
  local client_secret_file
  local event_state

  command=$1
  access_token_file="${HOME}/.google/access_token.json"
  client_secret_file="${HOME}/.google/client_secret.json"
  db_file="${HOME}/.google/calendar-script.db"
  script_file="${HOME}/.google/calendar-script.sh"
  log_file="${HOME}/.google/calendar-script.log"

  case $command in
    --help|-h)
      usage
      ;;
    --cron)
      if [ -f "${log_file}" ] && [ "$(stat -c%s "$log_file")" -gt 300000 ]; then
          tail -n 2000 "$log_file" > "${log_file}.0" && mv "${log_file}.0" "$log_file"
      fi
      echo "==> $(date +"%Y-%m-%d %H:%M:%S")" >> "${log_file}"
      google_calendar_script_auth \
        "${access_token_file}" "${client_secret_file}" >> "${log_file}" 2>&1
      google_calendar_script_events \
        "${db_file}" "${script_file}" "${access_token_file}" 1800 >> "${log_file}" 2>&1
      ;;
    --sync)
      google_calendar_script_auth "${access_token_file}" "${client_secret_file}" interactive
      google_calendar_script_events "${db_file}" "${script_file}" "${access_token_file}" 1
      ;;
    --auth)
      google_calendar_script_auth "${access_token_file}" "${client_secret_file}" interactive
      ;;
    --edit)
      nano "${script_file}"
      ;;
    --info)
      echo "==> Events: '${db_file}'"
      sed '/^#/d' "${db_file}"
      echo "[EOF]"
      echo
      echo "==> Script: '${script_file}'"
      sed -e '/./,$!d' -e :a -e '/^\n*$/{$d;N;ba' -e '}' "${script_file}"
      echo "[EOF]"
      ;;
    --test)
      event_state=${2:-STARTED}
      google_calendar_script_test "${event_state}" "${script_file}"
      ;;
    --logs)
      tail -f "${log_file}"
      ;;
    *)
      usage
      ;;
  esac
}

google_calendar_script_auth() {
  local access_token_file
  local client_secret_file
  local mode
  local last_modified
  local current_time
  local access_token_error

  access_token_file=$1
  client_secret_file=$2
  mode=$3

  if [ ! -f "${access_token_file}" ]; then
    if [ "${mode}" = "interactive" ]; then
      google_calendar_script_get_access_token "${access_token_file}" "${client_secret_file}"
    else
      echo "Error: Authorization is required, type: google-calendar-script --auth"
      exit 1
    fi
  fi

  last_modified=$(google_calendar_script_file_timestamp "${access_token_file}")
  current_time=$(date +%s)
  expiring_time=$((current_time - last_modified))

  #cat "${access_token_file}"

  access_token_error=$(jq -r '.error // ""' < "${access_token_file}" && true)
  if [ -n "$access_token_error" ]; then
    if [ "${mode}" = "interactive" ]; then
      rm -f "${access_token_file}"
      google_calendar_script_get_access_token "${access_token_file}" "${client_secret_file}"
    else
      echo "Error: Access token with $access_token_error, type: google-calendar-script --auth"
      exit 1
    fi
  fi

  #echo "$expiring_time"

  if [ "$expiring_time" -gt "1000" ]; then
    google_calendar_script_refresh_access_token "${access_token_file}" "${client_secret_file}"
  fi
}

google_calendar_script_get_access_token() {
  local access_token_file
  local client_secret_file
  local client_id
  local client_secret
  local scope
  local redirect_uri
  local oauth_url
  local message
  local response
  local request
  local code

  access_token_file=$1
  client_secret_file=$2

  client_id=$(sed -n 's/.*"client_id":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)
  client_secret=$(sed -n 's/.*"client_secret":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)

  scope="https://www.googleapis.com/auth/calendar.readonly"
  redirect_uri="http://localhost:9000"

  oauth_url="https://accounts.google.com/o/oauth2/auth"
  oauth_url="${oauth_url}?client_id=$client_id"
  oauth_url="${oauth_url}&redirect_uri=$redirect_uri"
  oauth_url="${oauth_url}&scope=$scope"
  oauth_url="${oauth_url}&response_type=code"
  oauth_url="${oauth_url}&access_type=offline"

  echo "Follow the link to authorize the application:"
  echo
  echo "$oauth_url"

  message="Authorization complete. You may close this window, then go back to the terminal."
  response="HTTP/1.1 200 OK\r\nContent-Length: ${#message}\r\n\r\n${message}"
  request=$(echo -ne "${response}" | nc -l -p 9000 | sed -n 's/GET \([^ ]*\).*/\1/p')

  code=$(echo "${request}" | sed -n 's/.*\?code=\([^&]*\).*/\1/p')

  request="client_id=$client_id&client_secret=$client_secret&code=$code&redirect_uri=$redirect_uri&grant_type=authorization_code"
  response=$(curl -s -d "${request}" "https://oauth2.googleapis.com/token")

  echo
  echo "Authorization complete. Access token saved to '${access_token_file}'"
  echo "${response}" > "${access_token_file}"
}

google_calendar_script_refresh_access_token() {
  local access_token_file
  local client_secret_file
  local client_id
  local client_secret
  local refresh_token_url
  local refresh_token

  access_token_file=$1
  client_secret_file=$2

  refresh_token_url="https://oauth2.googleapis.com/token"

  client_id=$(sed -n 's/.*"client_id":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)
  client_secret=$(sed -n 's/.*"client_secret":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)
  refresh_token=$(sed -n 's/.*"refresh_token": *"\(.*\)".*/\1/p' "${access_token_file}" | cut -d '"' -f 1)

  access_token=$(curl -s -X POST \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "client_id=$client_id" \
     -d "client_secret=$client_secret" \
     -d "refresh_token=$refresh_token" \
     -d "grant_type=refresh_token" \
     "$refresh_token_url" | sed 's#{#{\n  "refresh_token": "'"${refresh_token}"'",#')

  echo "Access token refreshed."

  echo "${access_token}" > "${access_token_file}"
}

google_calendar_script_events() {
  local cache_file
  local access_token_file
  local script_file
  local current_time
  local last_update
  local expiring_time
  local events

  cache_file=$1
  script_file=$2
  access_token_file=$3
  refresh_time=${4:-1800}

  current_time=$(date +%s)

  if [ -f "${cache_file}" ]; then
    last_update=$(sed -n 's/^META events_last_update \(.*\)$/\1/p' "${cache_file}")
  else
    last_update=0
    echo "## Cache file of google-calendar-script" > "${cache_file}"
    echo "META events_last_update $current_time" >> "${cache_file}"
  fi

  expiring_time=$((current_time - last_update))

  #echo "E: $expiring_time $refresh_time"

  if [ "${expiring_time}" -gt "${refresh_time}" ]; then
    echo "Syncing events..."
    google_calendar_script_refresh_events "${cache_file}" "${access_token_file}"

    temp_file=$(mktemp)
    sed 's/^META events_last_update \(.*\)$/META events_last_update '"$current_time"'/g' "${cache_file}" > "${temp_file}"
    mv "${temp_file}" "${cache_file}"
  fi

  #cat "${cache_file}"

  cp "${cache_file}" "${cache_file}.1"

  events=$(grep '^EVENT ' "${cache_file}.1" || true)
  if [ -n "${events}" ]; then
    echo "${events}" | while read -r line; do
      #echo "Processing: $line"
      google_calendar_script_parse_event "$cache_file" "$script_file" "$line"
    done
  else
    echo "No events found."
  fi

  rm -f "${cache_file}.1"
}

google_calendar_script_refresh_events() {
  local cache_file
  local access_token_file
  local access_token
  local calendar_ids
  local calendar_id
  local today
  local tomorrow
  local events_query
  local temp_file
  local error_message

  cache_file=$1
  access_token_file=$2
  access_token=$(sed -n 's/.*"access_token": *"\(.*\)".*/\1/p' "${access_token_file}" | cut -d '"' -f 1)

  grep '^EVENT' "${cache_file}" > "${cache_file}.0" && true

  temp_file=$(mktemp)
  sed '/^EVENT/d' "${cache_file}" > "${temp_file}"
  mv "${temp_file}" "${cache_file}"

  time_min=$(google_calendar_script_date "-12 hours")
  time_max=$(google_calendar_script_date "+12 hours")

  events_query="timeMin=$time_min&timeMax=$time_max&singleEvents=true&orderBy=startTime"
  calendar_list=$(curl -s -X GET -H "Authorization: Bearer $access_token" "https://www.googleapis.com/calendar/v3/users/me/calendarList")

  error_message=$(echo "$calendar_list" | jq -r '.error.message // ""' && true)

  if [ -n "$error_message" ]; then
    echo "Error: $error_message"
    exit 1
  fi

  echo "$calendar_list" \
    | jq -r '.items[] | "\(.id) \(.defaultReminders[0].minutes//0) \(.defaultReminders[1].minutes//0)"' \
    | while read -r calendar; do
        calendar_id=$(echo "$calendar" | cut -d' ' -f1)
        default_reminder_1=$(echo "$calendar" | cut -d' ' -f2)
        default_reminder_2=$(echo "$calendar" | cut -d' ' -f3)

        #echo "Found calendar $calendar_id"

        calendar_events=$(curl -s -X GET -H "Authorization: Bearer $access_token" \
            "https://www.googleapis.com/calendar/v3/calendars/$calendar_id/events?$events_query")

        echo "$calendar_events" \
          | jq -r '.items[] | "EVENT \(.id) '"$calendar_id"' \(.start.dateTime) \(.end.dateTime) \(.reminders.overrides[0].minutes//'"${default_reminder_1}"') \(.reminders.overrides[1].minutes//'"${default_reminder_2}"') \(.summary)"' \
          | while read -r line; do
              event_id=$(echo "$line" | cut -d' ' -f2)
              event_data=$(echo "$line" | cut -d' ' -f3-)
              event_state=$(grep "^EVENT $event_id" "${cache_file}.0" | cut -d' ' -f3)
              echo "EVENT ${event_id} ${event_state:-UNKNOWN} ${event_data}" >> "${cache_file}"
            done
      done

  rm -f "${cache_file}.0"
}

google_calendar_script_parse_event() {
  local cache_file
  local script_file
  local event
  local event_id
  local event_state
  local event_data
  local event_start
  local event_end
  local event_reminder_1
  local event_reminder_2
  local event_summary
  local current_time
  local current_date

  cache_file=$1
  script_file=$2
  event=$3

  event_id=$(echo "$event" | cut -d' ' -f2)
  event_state=$(echo "$event" | cut -d' ' -f3)

  if [ "$event_state" != "ENDED" ]; then
    event_start=$(echo "$event" | cut -d' ' -f5)
    event_end=$(echo "$event" | cut -d' ' -f6)
    event_reminder_1=$(echo "$event" | cut -d' ' -f7)
    event_reminder_2=$(echo "$event" | cut -d' ' -f8)
    event_summary=$(echo "$event" | cut -d' ' -f9-)

    update_state=${event_state}
    current_time=$(date +%s)
    current_date=$(google_calendar_script_date "${current_time}")

    #echo "S: $event_start E: $event_end R1: $event_reminder_1 R2: $event_reminder_2"
    start_time=$(google_calendar_script_date_timestamp "$event_start")
    end_time=$(google_calendar_script_date_timestamp "$event_end")
    reminder_1_time=$((start_time - event_reminder_1 * 60))
    reminder_2_time=$((start_time - event_reminder_2 * 60))

    #echo "END $current_time $end_time"
    #echo "START $current_time $start_time"
    #echo "REMINDER1 $current_time $reminder_1_time"

    echo -e "> Watching: ($event_state) '$event_summary'"

    if [ "$current_time" -lt "$start_time" ]; then
      update_state="PENDING"
    fi

    if [ "$current_time" -gt "$reminder_2_time" ]; then
      update_state="REMINDED1"
    fi

    if [ "$current_time" -gt "$reminder_1_time" ]; then
      update_state="REMINDED2"
    fi

    if [ "$current_time" -gt "$start_time" ]; then
      update_state="STARTED"
    fi

    if [ "$current_time" -gt "$end_time" ]; then
      update_state="ENDED"
    fi

    if [ "$update_state" != "$event_state" ]; then
      echo "  Updating state from '$event_state' to '$update_state'"

      temp_file="$(mktemp)"
      sed 's/^EVENT '"${event_id}"' [A-Z0-9]* /EVENT '"${event_id}"' '"${update_state}"' /g' "${cache_file}" > "${temp_file}"
      #diff "${temp_file}" "${cache_file}" && true
      mv "${temp_file}" "${cache_file}"

      if [ "${update_state}" != "PENDING" ]; then
        echo "  Running script at ${current_date}"
        echo "--------------------------------------------------------"
        export GOOGLE_CALENDAR_EVENT_ID="${event_id}"
        export GOOGLE_CALENDAR_EVENT_STATE="${update_state}"
        export GOOGLE_CALENDAR_EVENT_STATE_TIME="${current_date}"
        export GOOGLE_CALENDAR_EVENT_SUMMARY="${event_summary}"
        export GOOGLE_CALENDAR_EVENT_START="${event_start}"
        export GOOGLE_CALENDAR_EVENT_END="${event_end}"
        export GOOGLE_CALENDAR_EVENT_REMINDER_1="${event_reminder_1}"
        export GOOGLE_CALENDAR_EVENT_REMINDER_2="${event_reminder_2}"
        /bin/bash "${script_file}"
        echo "--------------------------------------------------------"
      else
        echo "  Skipping event, it is still in pending."
      fi
    fi

    #echo "EVENT $event_id $event_state $event_start $event_end $event_reminder_1 $event_reminder_2 $event_summary"
  fi
}


google_calendar_script_test() {
  local event_state
  local script_file

  event_state=${1:-STARTED}
  script_file=${2:-"${HOME}/.google/calendar-script.sh"}
  test_db_file=$(mktemp)

  case $event_state in
    PENDING)
      event_start=$(google_calendar_script_date "+1 hour")
      event_end=$(google_calendar_script_date "+2 hours")
      ;;
    REMINDED1)
      event_start=$(google_calendar_script_date "+8 minutes")
      event_end=$(google_calendar_script_date "+2 hours")
      ;;
    REMINDED2)
      event_start=$(google_calendar_script_date "+4 minutes")
      event_end=$(google_calendar_script_date "+2 hours")
      ;;
    STARTED)
      event_start=$(google_calendar_script_date "-5 minutes")
      event_end=$(google_calendar_script_date "+1 hour")
      ;;
    ENDED)
      event_start=$(google_calendar_script_date "-2 hours")
      event_end=$(google_calendar_script_date "-1 hour")
      ;;
    *)
      echo "Invalid state '${event_state}'"
      exit 1
      ;;
  esac

  echo "Testing '${event_state}' state on fake event"
  echo "EVENT ID UNKNOWN CALENDAR $event_start $event_end 5 10 Fake Calendar Event" > "${test_db_file}"
  google_calendar_script_events "${test_db_file}" "${script_file}"
  rm -f "${test_db_file}"
}

google_calendar_script_date() {
  local offset
  local sign
  local format

  offset=$1
  sign=${offset:0:1}
  format="%Y-%m-%dT%H:%M:%SZ"

  if [ -z "${offset}" ]; then
    date -u +"${format}"
  elif [ "${sign}" == "+" ] || [ "${sign}" == "-" ]; then
    if [ "$(uname)" == "Darwin" ]; then
      offset=$(echo "$offset" | sed 's/.*\([+-][0-9]*\) *\([a-z]\).*/\1\2/g' | tr 'hms' 'HMS')
      date -u -j -v"${offset}" +"${format}"
    else
      date -u -d "${offset}" +"${format}"
    fi
  else
    if [ "$(uname)" == "Darwin" ]; then
      date -r "${offset}" +"${format}"
    else
      date -d "@${offset}" +"${format}"
    fi
  fi
}

google_calendar_script_date_timestamp() {
  local date

  date=$1

  if [ "$(uname)" == "Darwin" ]; then
    date -j -f "%Y-%m-%dT%H:%M:%S" "${date:0:19}" +"%s"
  else
    date -d "$date" +"%s"
  fi
}

google_calendar_script_file_timestamp() {
  local file

  file=$1

  if [ "$(uname)" == "Darwin" ]; then
    stat -f %m "${file}"
  else
    stat -c %Y "${file}"
  fi
}
## BP005: Execute the entrypoint
main "$@"
