#!/usr/bin/env bash
## BP010: Release metadata
## @build_type: bin
## @build_date: 2024-02-07T18:40:17Z
set -e
extern() {
  extern=$1
}
legacy() {
  legacy=$1
}
module() {
  module=$1
}
public() {
  public=$1
}
use() {
  use=$1
}
embed() {
  embed=$1
}
## BP004: Compile the entrypoint

module auth
module events

main() {
  [ "$1" = "--sync" ] && refresh_interval=0

  if [ "$1" = "--auth" ]; then
    read -r -p "Google Client Id: " client_id
    read -r -p "Google Client Secret: " client_secret
    gcalcli --client-id "${client_id}" --client-secret "${client_secret}" list
    exit 0
  fi
}

google_calendar_script_auth() {
  local access_token_file
  local client_secret_file
  local last_modified
  local current_time

  access_token_file=$1
  client_secret_file=$2

  if [ ! -f "${access_token_file}" ]; then
    google_calendar_script_get_access_token "${access_token_file}" "${client_secret_file}"
  fi

  last_modified=$(stat -c %Y "${access_token_file}")
  current_time=$(date +%s)
  expiring_time=$((current_time - last_modified))

  echo "$expiring_time"

  if [ "$expiring_time" -gt "1000" ]; then
    google_calendar_script_refresh_access_token "${access_token_file}" "${client_secret_file}"
  fi
}

google_calendar_script_get_access_token() {
  local access_token_file
  local client_secret_file
  local client_id
  local client_secret
  local scope
  local redirect_uri
  local oauth_url
  local message
  local response
  local request
  local code

  access_token_file=$1
  client_secret_file=$2

  client_id=$(sed -n 's/.*"client_id":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)
  client_secret=$(sed -n 's/.*"client_secret":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)

  scope="https://www.googleapis.com/auth/calendar.readonly"
  redirect_uri="http://localhost:9000"

  oauth_url="https://accounts.google.com/o/oauth2/auth"
  oauth_url="${oauth_url}?client_id=$client_id"
  oauth_url="${oauth_url}&redirect_uri=$redirect_uri"
  oauth_url="${oauth_url}&scope=$scope"
  oauth_url="${oauth_url}&response_type=code"
  oauth_url="${oauth_url}&access_type=offline"

  echo "Follow the link to authorize the application:"
  echo
  echo "$oauth_url"

  message="Authorization complete. You may close this window, then go back to the terminal."
  response="HTTP/1.1 200 OK\r\nContent-Length: ${#message}\r\n\r\n${message}"
  request=$(echo -ne "${response}" | nc -l -p 9000 | sed -n 's/GET \([^ ]*\).*/\1/p')

  code=$(echo "${request}" | sed -n 's/.*\?code=\([^&]*\).*/\1/p')

  request="client_id=$client_id&client_secret=$client_secret&code=$code&redirect_uri=$redirect_uri&grant_type=authorization_code"
  response=$(curl -s -d "${request}" "https://oauth2.googleapis.com/token")

  echo
  echo "Authorization complete. Access token saved to '${access_token_file}'"
  echo "${response}" > "${access_token_file}"
}

google_calendar_script_refresh_access_token() {
  local access_token_file
  local client_secret_file
  local client_id
  local client_secret
  local refresh_token_url
  local refresh_token

  access_token_file=$1
  client_secret_file=$2

  refresh_token_url="https://oauth2.googleapis.com/token"

  client_id=$(sed -n 's/.*"client_id":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)
  client_secret=$(sed -n 's/.*"client_secret":"\(.*\)".*/\1/p' "${client_secret_file}" | cut -d '"' -f 1)
  refresh_token=$(sed -n 's/.*"refresh_token": *"\(.*\)".*/\1/p' "${access_token_file}" | cut -d '"' -f 1)

  access_token=$(curl -s -X POST \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "client_id=$client_id" \
     -d "client_secret=$client_secret" \
     -d "refresh_token=$refresh_token" \
     -d "grant_type=refresh_token" \
     "$refresh_token_url" | sed 's#{#{\n  "refresh_token": "'"${refresh_token}"'",#')

  echo "${access_token}" > "${access_token_file}"
}
google_calendar_script_events() {
  local cache_file
  local access_token_file
  local script_file
  local current_time
  local last_modified
  local expiring_time

  cache_file=$1
  access_token_file=$2
  script_file=$3

  current_time=$(date +%s)
  if [ -f "${cache_file}" ]; then
    last_modified=$(stat -c %Y "${cache_file}")
  else
    last_modified=0
    echo "## Cache file of google-calendar-script" > "${cache_file}"
  fi
  expiring_time=$((current_time - last_modified))

  echo "E: $expiring_time $current_time $last_modified"

  if [ "${expiring_time}" -gt "5" ]; then
    google_calendar_script_refresh_events "${cache_file}" "${access_token_file}"
  fi

  #cat "${cache_file}"

  cp "${cache_file}" "${cache_file}.1"
  grep '^EVENT ' "${cache_file}.1" | while read -r line; do
    echo "Processing $line"
    google_calendar_script_parse_event "$cache_file" "$script_file" "$line"
  done

  rm "${cache_file}.1"
}

google_calendar_script_refresh_events() {
  local cache_file
  local access_token_file
  local access_token
  local calendar_ids
  local calendar_id
  local today
  local tomorrow
  local events_query
  local temp_file

  cache_file=$1
  access_token_file=$2
  access_token=$(sed -n 's/.*"access_token": *"\(.*\)".*/\1/p' "${access_token_file}" | cut -d '"' -f 1)

  grep '^EVENT' "${cache_file}" > "${cache_file}.0"

  temp_file=$(mktemp)
  sed '/^EVENT/d' "${cache_file}" > "${temp_file}"
  mv "${temp_file}" "${cache_file}"

  today=$(date -u +"%Y-%m-%dT00:00:00Z")
  if [ "$(uname)" == "Darwin" ]; then
      tomorrow=$(date -u -j -v+1d -f "%Y-%m-%dT%H:%M:%SZ" "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" "+%Y-%m-%dT00:00:00Z")
  else
      tomorrow=$(date -u -d "tomorrow" +"%Y-%m-%dT00:00:00Z")
  fi


  events_query="timeMin=$today&timeMax=$tomorrow&singleEvents=true&orderBy=startTime"

  curl -s -X GET -H "Authorization: Bearer $access_token" "https://www.googleapis.com/calendar/v3/users/me/calendarList" \
    | jq -r '.items[] | "\(.id) \(.defaultReminders[0].minutes//0) \(.defaultReminders[1].minutes//0)"' \
    | while read -r calendar; do
      calendar_id=$(echo "$calendar" | cut -d' ' -f1)
      default_reminder_1=$(echo "$calendar" | cut -d' ' -f2)
      default_reminder_2=$(echo "$calendar" | cut -d' ' -f3)


      curl -s -X GET -H "Authorization: Bearer $access_token" \
        "https://www.googleapis.com/calendar/v3/calendars/$calendar_id/events?$events_query" \
          | jq -r '.items[] | "EVENT \(.id) '"$calendar_id"' \(.start.dateTime) \(.end.dateTime) \(.reminders.overrides[0].minutes//'"${default_reminder_1}"') \(.reminders.overrides[1].minutes//'"${default_reminder_2}"') \(.summary)"' \
          | while read -r line; do
            event_id=$(echo "$line" | cut -d' ' -f2)
            event_data=$(echo "$line" | cut -d' ' -f3-)
            event_state=$(grep "^EVENT $event_id" "${cache_file}.0" | cut -d' ' -f3)
            echo "EVENT ${event_id} ${event_state:-UNKNOWN} ${event_data}" >> "${cache_file}"
          done
    done







  rm -f "${cache_file}.0"
}

google_calendar_script_parse_event() {
  local cache_file
  local script_file
  local event
  local event_id
  local event_state
  local event_data
  local event_start
  local event_end
  local event_reminder_1
  local event_reminder_2
  local event_summary

  cache_file=$1
  script_file=$2
  event=$3

  event_id=$(echo "$event" | cut -d' ' -f2)
  event_state=$(echo "$event" | cut -d' ' -f3)
  event_data=$(echo "$event" | cut -d' ' -f4-)
  event_start=$(echo "$event_data" | cut -d' ' -f1)
  event_end=$(echo "$event_data" | cut -d' ' -f2)
  event_reminder_1=$(echo "$event_data" | cut -d' ' -f3)
  event_reminder_2=$(echo "$event_data" | cut -d' ' -f4)
  event_summary=$(echo "$event_data" | cut -d' ' -f5-)


  update_state=${event_state}
  current_time=$(date +%s)
  end_time=$(date -d "$event_end" +"%s")

  echo "END $current_time $end_time"

  if [ "$current_time" -gt "$end_time" ]; then
    update_state="ENDED"
  fi

  if [ "$update_state" != "$event_state" ]; then
    echo "Updating state of $event_id from $event_state to $update_state"
    temp_file="$(mktemp)"
    sed 's/^EVENT '"${event_id}"' [A-Z]* /EVENT '"${event_id}"' '"${update_state}"' /g' "${cache_file}" > "${temp_file}"
    mv "${temp_file}" "${cache_file}"

    export GOOGLE_CALENDAR_EVENT_ID=$event_id
    /bin/bash "${script_file}"
  fi


  #echo "EVENT $event_id $event_state $event_start $event_end $event_reminder_1 $event_reminder_2 $event_summary"
}## BP005: Execute the entrypoint
main "$@"
